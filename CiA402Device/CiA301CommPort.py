# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CiA301CommPort
else:
    import _CiA301CommPort

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import PortBase
USE_TIMEOUT = _CiA301CommPort.USE_TIMEOUT
FIND_RETRY = _CiA301CommPort.FIND_RETRY
class CiA301CommPort(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CiA301CommPort.CiA301CommPort_swiginit(self, _CiA301CommPort.new_CiA301CommPort(*args))

    def ReadSDO(self, address):
        return _CiA301CommPort.CiA301CommPort_ReadSDO(self, address)

    def ReadNMT(self, nmtCode):
        return _CiA301CommPort.CiA301CommPort_ReadNMT(self, nmtCode)

    def WriteNMT(self, nmtCommand):
        return _CiA301CommPort.CiA301CommPort_WriteNMT(self, nmtCommand)

    def WritePDO(self, number, command):
        return _CiA301CommPort.CiA301CommPort_WritePDO(self, number, command)

    def FlushBuffer(self, *args):
        return _CiA301CommPort.CiA301CommPort_FlushBuffer(self, *args)

    def WriteSDO(self, address, value):
        return _CiA301CommPort.CiA301CommPort_WriteSDO(self, address, value)

    def WritePDO4(self, command):
        return _CiA301CommPort.CiA301CommPort_WritePDO4(self, command)

    def ReadErrorNMT(self):
        return _CiA301CommPort.CiA301CommPort_ReadErrorNMT(self)

    def ReadPDO(self, number):
        return _CiA301CommPort.CiA301CommPort_ReadPDO(self, number)

    def DisablePDOs(self):
        return _CiA301CommPort.CiA301CommPort_DisablePDOs(self)

    def EnablePDOs(self):
        return _CiA301CommPort.CiA301CommPort_EnablePDOs(self)

    def data4x8to32(self, _in, dlc):
        return _CiA301CommPort.CiA301CommPort_data4x8to32(self, _in, dlc)

    def WritePDO1(self, command):
        return _CiA301CommPort.CiA301CommPort_WritePDO1(self, command)
    __swig_destroy__ = _CiA301CommPort.delete_CiA301CommPort

# Register CiA301CommPort in _CiA301CommPort:
_CiA301CommPort.CiA301CommPort_swigregister(CiA301CommPort)


cvar = _CiA301CommPort.cvar
tx0enable = cvar.tx0enable
tx0sub1 = cvar.tx0sub1
tx0sub2 = cvar.tx0sub2
tx1enable = cvar.tx1enable
tx2enable = cvar.tx2enable
tx3enable = cvar.tx3enable
tx1 = cvar.tx1
rx1 = cvar.rx1
tx2 = cvar.tx2
rx2 = cvar.rx2
tx3 = cvar.tx3
rx3 = cvar.rx3
started = cvar.started

