# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_CiA301CommPort')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_CiA301CommPort')
    _CiA301CommPort = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CiA301CommPort', [dirname(__file__)])
        except ImportError:
            import _CiA301CommPort
            return _CiA301CommPort
        try:
            _mod = imp.load_module('_CiA301CommPort', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _CiA301CommPort = swig_import_helper()
    del swig_import_helper
else:
    import _CiA301CommPort
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

import PortBase
USE_TIMEOUT = _CiA301CommPort.USE_TIMEOUT
FIND_RETRY = _CiA301CommPort.FIND_RETRY
class CiA301CommPort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CiA301CommPort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CiA301CommPort, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CiA301CommPort.new_CiA301CommPort(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadSDO(self, address):
        return _CiA301CommPort.CiA301CommPort_ReadSDO(self, address)

    def ReadNMT(self, nmtCode):
        return _CiA301CommPort.CiA301CommPort_ReadNMT(self, nmtCode)

    def WriteNMT(self, nmtCommand):
        return _CiA301CommPort.CiA301CommPort_WriteNMT(self, nmtCommand)

    def WritePDO(self, number, command):
        return _CiA301CommPort.CiA301CommPort_WritePDO(self, number, command)

    def FlushBuffer(self, *args):
        return _CiA301CommPort.CiA301CommPort_FlushBuffer(self, *args)

    def WriteSDO(self, address, value):
        return _CiA301CommPort.CiA301CommPort_WriteSDO(self, address, value)

    def WritePDO4(self, command):
        return _CiA301CommPort.CiA301CommPort_WritePDO4(self, command)

    def ReadErrorNMT(self):
        return _CiA301CommPort.CiA301CommPort_ReadErrorNMT(self)

    def ReadPDO(self, number):
        return _CiA301CommPort.CiA301CommPort_ReadPDO(self, number)

    def DisablePDOs(self):
        return _CiA301CommPort.CiA301CommPort_DisablePDOs(self)

    def EnablePDOs(self):
        return _CiA301CommPort.CiA301CommPort_EnablePDOs(self)

    def data4x8to32(self, arg2, dlc):
        return _CiA301CommPort.CiA301CommPort_data4x8to32(self, arg2, dlc)

    def WritePDO1(self, command):
        return _CiA301CommPort.CiA301CommPort_WritePDO1(self, command)
    __swig_destroy__ = _CiA301CommPort.delete_CiA301CommPort
    __del__ = lambda self: None
CiA301CommPort_swigregister = _CiA301CommPort.CiA301CommPort_swigregister
CiA301CommPort_swigregister(CiA301CommPort)

# This file is compatible with both classic and new-style classes.

cvar = _CiA301CommPort.cvar
tx0enable = cvar.tx0enable
tx0sub1 = cvar.tx0sub1
tx0sub2 = cvar.tx0sub2
tx1enable = cvar.tx1enable
tx2enable = cvar.tx2enable
tx3enable = cvar.tx3enable
tx1 = cvar.tx1
rx1 = cvar.rx1
tx2 = cvar.tx2
rx2 = cvar.rx2
tx3 = cvar.tx3
rx3 = cvar.rx3
started = cvar.started

