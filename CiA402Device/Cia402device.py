# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Cia402device')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Cia402device')
    _Cia402device = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Cia402device', [dirname(__file__)])
        except ImportError:
            import _Cia402device
            return _Cia402device
        try:
            _mod = imp.load_module('_Cia402device', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Cia402device = swig_import_helper()
    del swig_import_helper
else:
    import _Cia402device
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

import PortBase
import CiA301CommPort
import CiA402SetupData
PI = _Cia402device.PI
RPM2RADS = _Cia402device.RPM2RADS
RADS2RPM = _Cia402device.RADS2RPM
DEG2RADS = _Cia402device.DEG2RADS
RADS2DEG = _Cia402device.RADS2DEG
HIGHPART_BITSHIFT_16 = _Cia402device.HIGHPART_BITSHIFT_16
ANALOGUE_INPUT_SCALE = _Cia402device.ANALOGUE_INPUT_SCALE
class CiA402Device(CiA301CommPort.CiA301CommPort):
    __swig_setmethods__ = {}
    for _s in [CiA301CommPort.CiA301CommPort]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CiA402Device, name, value)
    __swig_getmethods__ = {}
    for _s in [CiA301CommPort.CiA301CommPort]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CiA402Device, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Cia402device.new_CiA402Device(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckStatus(self):
        return _Cia402device.CiA402Device_CheckStatus(self)

    def PrintStatus(self):
        return _Cia402device.CiA402Device_PrintStatus(self)

    def SwitchOn(self):
        return _Cia402device.CiA402Device_SwitchOn(self)

    def SwitchOff(self):
        return _Cia402device.CiA402Device_SwitchOff(self)

    def QuickStop(self):
        return _Cia402device.CiA402Device_QuickStop(self)

    def GetPosition(self):
        return _Cia402device.CiA402Device_GetPosition(self)

    def GetVelocity(self):
        return _Cia402device.CiA402Device_GetVelocity(self)

    def GetFilteredVelocity(self, samples):
        return _Cia402device.CiA402Device_GetFilteredVelocity(self, samples)

    def GetMeanVelocity(self):
        return _Cia402device.CiA402Device_GetMeanVelocity(self)

    def GetAmps(self):
        return _Cia402device.CiA402Device_GetAmps(self)

    def GetFilterdAmps(self):
        return _Cia402device.CiA402Device_GetFilterdAmps(self)

    def SetCommunications(self, fdPort):
        return _Cia402device.CiA402Device_SetCommunications(self, fdPort)

    def CheckError(self):
        return _Cia402device.CiA402Device_CheckError(self)

    def OperationMode(self, new_mode):
        return _Cia402device.CiA402Device_OperationMode(self, new_mode)

    def Setup_Velocity_Mode(self, acceleration=1, target=0):
        return _Cia402device.CiA402Device_Setup_Velocity_Mode(self, acceleration, target)

    def Setup_Torque_Mode(self):
        return _Cia402device.CiA402Device_Setup_Torque_Mode(self)

    def SetTorque(self, target):
        return _Cia402device.CiA402Device_SetTorque(self, target)

    def SetAmpRaw(self, target):
        return _Cia402device.CiA402Device_SetAmpRaw(self, target)

    def ForceSwitchOff(self):
        return _Cia402device.CiA402Device_ForceSwitchOff(self)

    def SetPosition(self, target):
        return _Cia402device.CiA402Device_SetPosition(self, target)

    def SetupPositionMode(self, velocity=1, acceleration=1):
        return _Cia402device.CiA402Device_SetupPositionMode(self, velocity, acceleration)

    def SetPositionRECURSIVE_test(self, target):
        return _Cia402device.CiA402Device_SetPositionRECURSIVE_test(self, target)

    def SetTarget_VELOCITY_PROPORCIONAL(self, target, kp):
        return _Cia402device.CiA402Device_SetTarget_VELOCITY_PROPORCIONAL(self, target, kp)

    def Reset(self):
        return _Cia402device.CiA402Device_Reset(self)

    def StartNode(self):
        return _Cia402device.CiA402Device_StartNode(self)

    def SetVelocity(self, target):
        return _Cia402device.CiA402Device_SetVelocity(self, target)

    def SetEnc_res(self, lines):
        return _Cia402device.CiA402Device_SetEnc_res(self, lines)

    def SetRed_Mot(self, reduction_ratio):
        return _Cia402device.CiA402Device_SetRed_Mot(self, reduction_ratio)

    def SetSampling_period(self, sampling_period):
        return _Cia402device.CiA402Device_SetSampling_period(self, sampling_period)

    def Scaling(self):
        return _Cia402device.CiA402Device_Scaling(self)
    __swig_destroy__ = _Cia402device.delete_CiA402Device
    __del__ = lambda self: None
CiA402Device_swigregister = _Cia402device.CiA402Device_swigregister
CiA402Device_swigregister(CiA402Device)

# This file is compatible with both classic and new-style classes.


